---
welcome:
  type: confirm
  message: |
    This is a tutorial to walk you through some patterns that might help
    you learning jinja and how it is used in the context of Tackle Box.
    
intro:
  type: confirm
  message: |
    If you don't know anything about jinja...
    
    Jinja is a full featured templating languages used by many web frameworks
    like flask to deliver rendered content to clients.  This can be html or
    anything really.  It is heavily used by Ansible as a way to address
    different things.  Cookiecutter used it for all rendering and we use it
    primarily in dealing with the following situations which we'll go over.
    
      1. Lists and loops
      2. Conditionals
      3. Qualifications - WIP
      4. List comprehensions - WIP
      5. Advanced string rendering - WIP

example_lists_loops:
  type: confirm
  message: |
    For instance, in the monty-python demo, there was a list that was brought in
    for a loop.

    colors:
      type: stat # This hook just inputs a variable
      input:
        - blue
        - green
        - grey
    {% raw %}
  
    color_essays:
        type: input
        message: Please tell me how much you like the color {{item}}?
        default: Oh color {{item}}, you are so frickin cool...
        loop: "{{ colors }}"
  
      Here we see a reference to the color list and it iterates over the `item`
      as the iterand. Loops are nice for a lot of reasons. For us at
      insight-infrastructure, we use them to deploy servers in mulitple regions though
      I am sure people will think of many uses for them as displayed in this demo.
      
      To see it action...{% endraw %}

colors:
  type: stat # This hook just inputs a variable
  input:
    - blue
    - green
    - grey

color_essays:
  type: input
  message: Please tell me how much you like the color {{item}}?
  default: Oh color {{item}}, you are so frickin cool...
  loop: "{{ colors }}"

example_conditionals:
  type: confirm
  message: |
    The most common use of jinja in tackle box is for expressing conditionals.
    Setting a variable conditionally is done by including a `when` key to the hook.
    This is then (like everything that is part of an hook) is rendered to expect a
    boolean. Here are a couple examples of some of those conditionals.
    {% raw %}
    color_essays:
      type: input
      message: The sky is {{item}}...
      loop: "{{ colors }}"
      when: "{{ colors|length > 0 }}" # This saves an error if the list is empty
  
    bad_outcome:
      type: print
      statement: Wrong answer {{ name }}...
      when: "{{ wingspeed == 'I donno' }}"
    
      This is qualified based on your answer to a previous question. If the previous
      question was a list, you can then
    
    To see it action...{% endraw %}


wingspeed:
  type: select
  message: What is the airspeed velocity of an unladen swallow??
  choices:
    - I donno
    - What do you mean? African or European swallow?

bad_outcome:
  type: print
  statement: Wrong answer...
  when: "{{ wingspeed == 'I donno' }}"

ending:
  type: confirm
  message: |
    
    This is a WIP tutorial.
    
    Stay tuned.
