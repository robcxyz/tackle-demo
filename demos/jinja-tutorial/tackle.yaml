---
welcome:
  ->: confirm
  message: |
    This is a tutorial to walk you through some patterns that might help
    you learning jinja and how it is used in the context of Tackle Box.
    
intro:
  ->: confirm
  message: |
    If you don't know anything about jinja...
    
    Jinja is a full featured templating languages that allows referencing of
    other objects and expression of logic within tackle box. So for instance
    if you had a input like this

    name: Rob

    You could then reference that variable by wrapping the key with jinja.

    hello: {{ name }}

    But thats just the start.  Follow allong to learn more about how to use jinja for:

      1. Lists and loops
      2. Conditionals
      3. Qualifications - WIP
      4. List comprehensions - WIP
      5. Advanced string rendering - WIP

example_lists_loops:
  ->: confirm
  message: |
    For instance, in the monty-python demo, there was a list that was brought in
    for a loop.

    colors:
      ->: stat # This hook just inputs a variable
      input:
        - blue
        - green
        - grey
    {% raw %}
  
    color_essays:
        ->: input
        message: Please tell me how much you like the color {{item}}?
        default: Oh color {{item}}, you are so frickin cool...
        for: "{{ colors }}"
  
      Here we see a reference to the color list and it iterates over the `item`
      as the iterand. This variable along with an integer `index` are injected
      into the context at run time so that they can be rendered within the loop.
      
      To see it action...{% endraw %}

colors:
  - blue
  - green
  - grey

color_essays:
  ->: input
  message: Please tell me how much you like the color {{item}}?
  default: Oh color {{item}}, you are so frickin cool...
  for: "{{ colors }}"


example_conditionals:
  ->: confirm
  message: |
    The most common use of jinja in tackle box is for expressing conditionals.
    Setting a variable conditionally is done by including a `if` key to the hook.
    Because there is no reason to not render this field, it is rendered by default
    so you don't even need to wrap it with curly braces.

    Here are a couple examples of some of those conditionals.
    {% raw %}
    colors:
      - blue
      - green
      - grey

    color_essays:
      ->: input
      message: The sky is {{item}}...
      for: colors  # Strings are also automatically rendered for loops
      if: colors|length > 0 # This saves an error if the list is empty
  
    bad_outcome:
      ->: print Wrong answer {{ name }}...
      if: wingspeed == 'I donno'
    
    This is qualified based on your answer to a previous question. If the previous
    question was a list, you can then
    
    To see it action...{% endraw %}


wingspeed:
  ->: select
  message: What is the airspeed velocity of an unladen swallow??
  choices:
    - I donno
    - What do you mean? African or European swallow?

bad_outcome:
  ->: print
  statement: Wrong answer...
  if: "{{ wingspeed == 'I donno' }}"


ending:
  ->: confirm
  message: |
    
    This is a WIP tutorial.
    
    Stay tuned.
